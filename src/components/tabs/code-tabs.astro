---
import { getIds } from './getIds'
const slotKeys = Object.keys(Astro.slots).filter((key) => key !== 'default')

async function getCodeBlocks() {
	return await Promise.all(
		slotKeys.map(async (key) => {
			const render = await Astro.slots.render(key)
			const id = getIds()
			return {
				id: id,
				name: key,
				render
			}
		})
	)
}

const codeBlocks = await getCodeBlocks()
---

<div class="tabs-container">
	<ul class="mb-2 flex border-b border-highlight" aria-labelledby="tabs-title">
		{
			codeBlocks.map((html) => (
				<li role="presentation">
					<a
						id={`${html.id}`}
						href={`#${html.id}`}
						class="p-1 px-2 font-mono aria-selected:border-b aria-selected:border-highlight-hover
						aria-selected:font-semibold"
					>
						{html.name}
					</a>
				</li>
			))
		}
	</ul>

	<div class="tab-content">
		{
			codeBlocks.map((html) => (
				<section id={`${html.id}`} aria-labelledby={`${html.id}`}>
					<Fragment set:html={html.render} />
				</section>
			))
		}
	</div>
</div>

<script>
	function setup(document: Document) {
		const containers = document.querySelectorAll('.tabs-container')

		containers.forEach((container) => {
			const list = container.querySelector('ul')
			const buttons = container.querySelectorAll('a')
			const panels = container.querySelectorAll('.tab-content > section')

			list?.setAttribute('role', 'tablist')

			buttons.forEach((tab, index) => {
				tab.setAttribute('role', 'tab')
				tab.setAttribute('tabindex', '-1')
				if (index === 0) {
					tab.setAttribute('aria-selected', 'true')
				} else {
					panels[index].setAttribute('hidden', '')
				}
			})

			panels.forEach((panel) => {
				panel.setAttribute('role', 'tabpanel')
				panel.setAttribute('tabindex', '0')
			})

			container.addEventListener('click', (e) => {
				const target = e.target as HTMLElement
				const clickedTab = target?.closest('a')
				if (!clickedTab) return
				e.preventDefault()

				switchTab(clickedTab)
			})

			container.addEventListener('keydown', (e) => {
				const event = e as KeyboardEvent
				switch (event.key) {
					case 'ArrowLeft':
						move('left')
						break
					case 'ArrowRight':
						move('right')
						break
				}
			})

			function switchTab(newTab: HTMLButtonElement | HTMLAnchorElement) {
				const activePanelId = newTab.getAttribute('href')?.replace('#', '')
				const activePanel = container?.querySelector(`section[id='${activePanelId}']`)

				buttons?.forEach((tab) => {
					tab.setAttribute('aria-selected', 'false')
					tab.setAttribute('tabindex', '-1')
				})

				panels?.forEach((panel) => {
					panel.setAttribute('hidden', 'true')
				})

				activePanel?.removeAttribute('hidden')

				newTab.setAttribute('aria-selected', 'true')
				newTab.setAttribute('tabindex', '0')
				newTab.focus()
			}

			function move(direction: 'left' | 'right') {
				const currentTab = document.activeElement

				const targetSibling =
					direction === 'left'
						? currentTab?.parentElement?.previousElementSibling
						: currentTab?.parentElement?.nextElementSibling

				const targetTab = targetSibling
					? targetSibling.querySelector('a')
					: buttons[direction === 'left' ? buttons.length - 1 : 0]

				switchTab(targetTab!)
			}
		})
	}
	document.addEventListener('astro:page-load', (ev) => {
		setup(document)
	})

	document.addEventListener('astro:before-swap', (ev) => {
		setup(ev.newDocument)
	})
</script>
