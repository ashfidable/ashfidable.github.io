---
import BaseSeo from '$components/base-seo.astro'
import BlogCard from '$components/cards/blog-card.astro'
import HeroSection from '$components/hero-section.astro'
import BaseLayout from '$layouts/base-layout.astro'
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'

const posts = await getCollection('posts', ({ id }) => {
	return id.startsWith('blog/')
})

const filteredPosts = posts.sort(
	(a, b) => a.data.published_time.getTime() - b.data.published_time.getTime()
)

const groupedByYear: { [year: string]: CollectionEntry<'posts'>[] } = {}

for (const item of filteredPosts) {
	const year = item.data.published_time.getFullYear()
	if (!groupedByYear[year]) {
		groupedByYear[year] = [item]
	} else {
		groupedByYear[year].push(item)
	}
}

const postsCount = posts.length
---

<BaseLayout title="Blog">
	<Fragment slot="seo">
		<BaseSeo title="Blog" description="Posts written by Me." type="website" />
	</Fragment>
	<HeroSection title="Blog ðŸ“™">
		<p class="font-bold">
			This is where I write my thoughts, tutorials, break down mechanics--and much more.
		</p>
		<p>
			I have written <strong>{postsCount}</strong>
			{postsCount > 1 ? 'articles' : 'article'} so far.
		</p>
	</HeroSection>

	{
		Object.keys(groupedByYear)
			.reverse()
			.map((year) => {
				const posts = groupedByYear[year]
				return (
					<section class="flex flex-col gap-4">
						<h2 class="font-heading text-xl font-bold">{year}</h2>
						<ul class="grid grid-cols-1 gap-2 md:grid-cols-2 lg:grid-cols-3">
							{posts.map((post) => (
								<li>
									<BlogCard post={post} />
								</li>
							))}
						</ul>
					</section>
				)
			})
	}
</BaseLayout>
